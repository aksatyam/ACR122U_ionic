package in.co.indusnet.cordova.plugins.nfc;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbManager;
import android.os.AsyncTask;
import android.util.Log;
import android.app.PendingIntent;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaWebView;

import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ArrayAdapter;

import com.acs.smartcard.Features;
import com.acs.smartcard.PinModify;
import com.acs.smartcard.PinProperties;
import com.acs.smartcard.PinVerify;
import com.acs.smartcard.ReadKeyOption;
import com.acs.smartcard.Reader;
import com.acs.smartcard.Reader.OnStateChangeListener;
import com.acs.smartcard.ReaderException;
import com.acs.smartcard.TlvProperties;

/**
 * KNfcAcr122U android Created by Krishnendu Sekhar Das
 */
public class KNfcAcr122U extends CordovaPlugin {
    private static final String[] powerActionStrings = { "Power Down", "Cold Reset", "Warm Reset" };

    private static final String[] stateStrings = { "Unknown", "Absent", "Present", "Swallowed", "Powered", "Negotiable",
            "Specific" };

    private static final String[] featureStrings = { "FEATURE_UNKNOWN", "FEATURE_VERIFY_PIN_START",
            "FEATURE_VERIFY_PIN_FINISH", "FEATURE_MODIFY_PIN_START", "FEATURE_MODIFY_PIN_FINISH",
            "FEATURE_GET_KEY_PRESSED", "FEATURE_VERIFY_PIN_DIRECT", "FEATURE_MODIFY_PIN_DIRECT",
            "FEATURE_MCT_READER_DIRECT", "FEATURE_MCT_UNIVERSAL", "FEATURE_IFD_PIN_PROPERTIES", "FEATURE_ABORT",
            "FEATURE_SET_SPE_MESSAGE", "FEATURE_VERIFY_PIN_DIRECT_APP_ID", "FEATURE_MODIFY_PIN_DIRECT_APP_ID",
            "FEATURE_WRITE_DISPLAY", "FEATURE_GET_KEY", "FEATURE_IFD_DISPLAY_PROPERTIES", "FEATURE_GET_TLV_PROPERTIES",
            "FEATURE_CCID_ESC_COMMAND" };

    private static final String[] propertyStrings = { "Unknown", "wLcdLayout", "bEntryValidationCondition", "bTimeOut2",
            "wLcdMaxCharacters", "wLcdMaxLines", "bMinPINSize", "bMaxPINSize", "sFirmwareID", "bPPDUSupport",
            "dwMaxAPDUDataSize", "wIdVendor", "wIdProduct" };

    private static final int DIALOG_VERIFY_PIN_ID = 0;
    private static final int DIALOG_MODIFY_PIN_ID = 1;
    private static final int DIALOG_READ_KEY_ID = 2;
    private static final int DIALOG_DISPLAY_LCD_MESSAGE_ID = 3;

    private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
    private static final String UNKNOWN = "UNKNOWN";
    private static final String MIFARE_CLASSIC_1K = "MIFARE_CLASSIC_1K";
    private static final String MIFARE_CLASSIC_4K = "MIFARE_CLASSIC_4K";
    private static final String MIFARE_ULTRALIGHT = "MIFARE_ULTRALIGHT";
    private static final String MIFARE_MINI = "MIFARE_MINI";
    private static final String TOPAZ_JEWEL = "TOPAZ_JEWEL";
    private static final String FELICA_212K = "FELICA_212K";
    private static final String FELICA_424K = "FELICA_424K";
    private static final String NFCIP = "NFCIP";
    private static final String DESFIRE_EV1 = "DESFIRE_EV1";

    private static final String RES_TYPE_NO_DEVICE_ATTACHED = "NO_DEVICE_ATTACHED";
    private static final String RES_TYPE_DEVICE_CONNECTION_OPENED = "DEVICE_CONNECTION_OPENED";
    private static final String RES_TYPE_DEVICE_CONNECTION_CLOSED = "DEVICE_CONNECTION_CLOSED";
    private static final String RES_TYPE_DEVICE_CONNECTION_ERROR = "DEVICE_CONNECTION_ERROR";
    private static final String RES_TYPE_TAG_INFO = "TAG_INFO";
    private static final String RES_TYPE_ERROR = "ERROR";
    private static final String RES_ERROR = "Error!!, please try again";

    private UsbManager mManager;
    private Reader mReader = null;
    private PendingIntent mPermissionIntent;
    private UsbDevice device = null;

    private CallbackContext rootCallbackContext = null;
    private Boolean isDeviceAttached = false;
    private Boolean initState = false;
    public int slotNos;
    public int prevStates;
    public int nextStates;

    public byte[] authenticateBlock;
    public byte[] authenticateBlockReponse;

    public byte[] readBlock;
    public byte[] readBlockReponse;

    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {

        public void onReceive(Context context, Intent intent) {

            String action = intent.getAction();
            Log.d(":: BROAD_CAST ACTION ::", action);

            if (ACTION_USB_PERMISSION.equals(action)) {

                synchronized (this) {
                    device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                    if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {

                        if (device != null) {
                            Log.d(":: DEVICE_INFO :: ", device.getDeviceName());
                            try {
                                new OpenTask().execute(device);
                            } catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            }
                        }

                    } else {

                    }
                }

            } else if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {

                synchronized (this) {
                    isDeviceAttached = true;
                    Log.d(":: USB_DEVICE :: ", "ATTACHED");
                    initConnection();
                }

            } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {

                synchronized (this) {
                    UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                    isDeviceAttached = false;
                    Log.d(":: USB_DEVICE :: ", "DETACHED");

                    KeepCallBackParams params = new KeepCallBackParams();
                    params.isKeepCallBack = true;
                    new CloseTask().execute(params);
                }

            }
        }
    };

    public void getKeys(Integer index) {
        if (index == 4) {
            authenticateBlock = new byte[] { (byte) 0xFF, (byte) 0x86, (byte) 0x00, (byte) 0x00, (byte) 0x05,
                    (byte) 0x01, (byte) 0x00, (byte) 0x04, (byte) 0x61, (byte) 0x00 };

            readBlock = new byte[] { (byte) 0xFF, (byte) 0xB0, (byte) 0x00, (byte) 0x04, (byte) 0x10 };
            return;
        } else if (index == 5) {
            authenticateBlock = new byte[] { (byte) 0xFF, (byte) 0x86, (byte) 0x00, (byte) 0x00, (byte) 0x05,
                    (byte) 0x01, (byte) 0x00, (byte) 0x05, (byte) 0x61, (byte) 0x00 };

            readBlock = new byte[] { (byte) 0xFF, (byte) 0xB0, (byte) 0x00, (byte) 0x05, (byte) 0x10 };
            return;
        } else if (index == 6) {
            authenticateBlock = new byte[] { (byte) 0xFF, (byte) 0x86, (byte) 0x00, (byte) 0x00, (byte) 0x05,
                    (byte) 0x01, (byte) 0x00, (byte) 0x06, (byte) 0x61, (byte) 0x00 };

            readBlock = new byte[] { (byte) 0xFF, (byte) 0xB0, (byte) 0x00, (byte) 0x06, (byte) 0x10 };
            return;
        } else if (index == 7) {
            authenticateBlock = new byte[] { (byte) 0xFF, (byte) 0x86, (byte) 0x00, (byte) 0x00, (byte) 0x05,
                    (byte) 0x01, (byte) 0x00, (byte) 0x07, (byte) 0x61, (byte) 0x00 };

            readBlock = new byte[] { (byte) 0xFF, (byte) 0xB0, (byte) 0x00, (byte) 0x07, (byte) 0x10 };
            return;
        }
    }

    @Override
    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);

        // Get USB manager
        mManager = (UsbManager) this.cordova.getActivity().getSystemService(Context.USB_SERVICE);

        // Initialize reader
        mReader = new Reader(mManager);

        mReader.setOnStateChangeListener(new Reader.OnStateChangeListener() {

            @Override
            public void onStateChange(int slotNum, int prevState, int currState) {
                slotNos = slotNum;
                prevStates = prevState;
                nextStates = currState;
                if (currState == Reader.CARD_PRESENT) {
                    JSONObject resObj = new JSONObject();
                    JSONObject tagInfo = new JSONObject();

                    int byteCount;
                    int authKeyResponse;
                    byte[] atr;
                    String cardData = new String();
                    authenticateBlockReponse = new byte[16];
                    readBlockReponse = new byte[30];
                    if (nextStates == Reader.CARD_PRESENT) {
                        // Read Card UID Command
                        byte[] sendBuffer = new byte[] { (byte) 0xFF, (byte) 0xCA, (byte) 0x0, (byte) 0x0, (byte) 0x0 };
                        byte[] receiveBuffer = new byte[16];

                        // Load Default Authentication Key
                        byte[] authBuffer = new byte[] { (byte) 0xFF, (byte) 0x82, (byte) 0x00, (byte) 0x00,
                                (byte) 0x06, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                                (byte) 0xFF };
                        byte[] authResponse = new byte[16];

                        try {
                            atr = mReader.power(slotNos, Reader.CARD_WARM_RESET);
                            mReader.setProtocol(slotNos, Reader.PROTOCOL_T0 | Reader.PROTOCOL_T1);
                            // Getting UID
                            byteCount = mReader.control(slotNos, Reader.IOCTL_CCID_ESCAPE, sendBuffer,
                                    sendBuffer.length, receiveBuffer, receiveBuffer.length);
                            // Load default Authentication key
                            authKeyResponse = mReader.transmit(slotNos, authBuffer, authBuffer.length, authResponse,
                                    authResponse.length);

                            if (toHexString(authResponse).contains("90")) {
                                for (int i = 4; i < 8; i++) {
                                    getKeys(i);
                                    mReader.transmit(slotNos, authenticateBlock, authenticateBlock.length,
                                            authenticateBlockReponse, authenticateBlockReponse.length);
                                    if (toHexString(authenticateBlockReponse).contains("90")) {
                                        mReader.transmit(slotNos, readBlock, readBlock.length, readBlockReponse,
                                                readBlockReponse.length);
                                        if (i == 4) {
                                            String s = new String(readBlockReponse);
                                            s = s.substring(11, readBlockReponse.length);
                                            s = s.substring(0, 5);
                                            cardData = cardData + s;
                                        }
                                        if (i == 5) {
                                            String s = new String(readBlockReponse);
                                            s = s.substring(0, 16);
                                            cardData = cardData + s;
                                        }
                                        if (i == 6) {
                                            String s = new String(readBlockReponse);
                                            s = s.substring(0, 15);
                                            cardData = cardData + s;
                                        }
                                    }
                                }
                                try {
                                    tagInfo.put("cardData", cardData);
                                    resObj.put("tagInfo", tagInfo);
                                    sendCallback(resObj, PluginResult.Status.OK, true);
                                } catch (JSONException e) {
                                    sendExceptionCallback(e.toString(), false);
                                }
                            }

                        } catch (ReaderException e) {
                            e.printStackTrace();
                        }
                    } else {

                    }
                }
            }
        });

        // Register receiver for USB permission
        mPermissionIntent = PendingIntent.getBroadcast(this.cordova.getActivity(), 0, new Intent(ACTION_USB_PERMISSION),0);

    }

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        rootCallbackContext = callbackContext;
        if (action.equals("connect")) {
            init();
            return true;
        } else if (action.equals("disconnect")) {
            closeConnection();
            return true;
        }
        return false;
    }

    private void init() {

        if (mManager.getDeviceList().values().size() > 0) {
            if (!initState) {
                IntentFilter filter = new IntentFilter();
                filter.addAction(ACTION_USB_PERMISSION);
                filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
                filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
                this.cordova.getActivity().registerReceiver(mReceiver, filter);

                initState = true;
                initConnection();
            } else {
                initConnection();
            }
        } else {
            JSONObject resObj = new JSONObject();
            try {
                resObj.put("type", RES_TYPE_NO_DEVICE_ATTACHED);
                resObj.put("message", "No USB device attached with this phone");
                sendCallback(resObj, PluginResult.Status.ERROR, false);
            } catch (JSONException e) {
                sendExceptionCallback(e.toString(), false);
            }
        }

    }

    private void initConnection() {
        for (UsbDevice device : mManager.getDeviceList().values()) {
            mManager.requestPermission(device, mPermissionIntent);
        }
    }

    private void closeConnection() {
        this.cordova.getActivity().unregisterReceiver(mReceiver);
        initState = false;
        KeepCallBackParams params = new KeepCallBackParams();
        params.isKeepCallBack = false;
        new CloseTask().execute(params);
    }

    void buildAndSentCardInfo(byte[] data, String tagType) {

        byte responseCode = data[data.length - 1];
        byte[] data4byte = Arrays.copyOf(data, 4);

        JSONObject resObj = new JSONObject();
        try {

            if (responseCode == (byte) 0x90) {
                // success

                String uidHex = "";
                String uidHexReverse = "";

                String uid4byteHex = "";
                String uid4byteHexReverse = "";

                for (byte b : Arrays.copyOf(data, data.length - 1)) {
                    String st = String.format("%02X", b);
                    uidHex += st;
                    uidHexReverse = st + uidHexReverse;
                }

                for (byte b : data4byte) {
                    String st = String.format("%02X", b);
                    uid4byteHex += st;
                    uid4byteHexReverse = st + uid4byteHexReverse;
                }

                JSONObject tagInfo = new JSONObject();
                tagInfo.put("uid", uidHex);
                tagInfo.put("uidReverse", uidHexReverse);
                tagInfo.put("uidHex", uidHex.replaceAll("..(?!$)", "$0:"));
                tagInfo.put("uidHexReverse", uidHexReverse.replaceAll("..(?!$)", "$0:"));
                tagInfo.put("uid4byteHex", uid4byteHex.replaceAll("..(?!$)", "$0:"));
                tagInfo.put("uid4byteHexReverse", uid4byteHexReverse.replaceAll("..(?!$)", "$0:"));

                tagInfo.put("tagType", tagType);

                resObj.put("type", RES_TYPE_TAG_INFO);
                resObj.put("message", "The operation completed successfully");
                resObj.put("tagInfo", tagInfo);

                sendCallback(resObj, PluginResult.Status.OK, true);
            } else if (responseCode == (byte) 0x63) {
                // Error
                // resObj.put("type", RES_TYPE_ERROR);
                // resObj.put("message", "The operation failed.");
                // sendCallback(resObj, PluginResult.Status.ERROR, true);
            } else if (responseCode == (byte) 0x81) {
                // Error
                resObj.put("type", RES_TYPE_ERROR);
                if (data.length >= 2 && data[data.length - 2] == (byte) 0x6A) {
                    resObj.put("message", "Function not supported.");
                } else {
                    resObj.put("message", RES_ERROR);
                }
                sendCallback(resObj, PluginResult.Status.ERROR, true);
            } else {
                resObj.put("type", RES_TYPE_ERROR);
                resObj.put("message", RES_ERROR);
                sendCallback(resObj, PluginResult.Status.ERROR, true);
            }

        } catch (JSONException e) {
            sendExceptionCallback(e.toString(), true);
        }

    }

    private class OpenTask extends AsyncTask<UsbDevice, Void, Exception> {

        @Override
        protected Exception doInBackground(UsbDevice... params) {
            Exception result = null;
            try {
                mReader.open(params[0]);
            } catch (Exception e) {
                result = e;
            }
            return result;
        }

        @Override
        protected void onPostExecute(Exception e) {

            JSONObject resObj = new JSONObject();

            try {
                if (e != null) {
                    resObj.put("type", RES_TYPE_DEVICE_CONNECTION_ERROR);
                    resObj.put("message", e.toString());
                    sendCallback(resObj, PluginResult.Status.ERROR, true);
                } else {
                    JSONObject deviceInfo = new JSONObject();
                    deviceInfo.put("name", mReader.getReaderName());
                    deviceInfo.put("location", mReader.getDevice().getDeviceName());
                    deviceInfo.put("class", mReader.getDevice().getDeviceClass());
                    deviceInfo.put("vendorId", mReader.getDevice().getVendorId());
                    deviceInfo.put("productId", mReader.getDevice().getProductId());

                    resObj.put("type", RES_TYPE_DEVICE_CONNECTION_OPENED);
                    resObj.put("message", "Connection is successful with " + mReader.getReaderName());
                    resObj.put("deviceInfo", deviceInfo);

                    sendCallback(resObj, PluginResult.Status.OK, true);
                }

            } catch (JSONException e1) {
                sendExceptionCallback(e1.toString(), true);
            }
        }
    }

    private class KeepCallBackParams {
        public boolean isKeepCallBack;
    }

    private class CloseTask extends AsyncTask<KeepCallBackParams, Void, Exception> {
        Boolean isKeepCallBack;

        @Override
        protected Exception doInBackground(KeepCallBackParams... params) {

            isKeepCallBack = params[0].isKeepCallBack;

            Exception result = null;
            try {
                Log.d("CLOSE::", mReader.isOpened() + "");
                if (mReader != null && mReader.isOpened()) {
                    mReader.close();
                }
            } catch (Exception e) {
                result = e;
            }
            return result;
        }

        @Override
        protected void onPostExecute(Exception e) {
            JSONObject resObj = new JSONObject();

            try {
                if (e != null) {
                    resObj.put("type", RES_ERROR);
                    resObj.put("message", e.toString());
                    sendCallback(resObj, PluginResult.Status.ERROR, isKeepCallBack);
                } else {
                    resObj.put("type", RES_TYPE_DEVICE_CONNECTION_CLOSED);
                    resObj.put("message", "Connection closed successful ");
                    sendCallback(resObj, PluginResult.Status.OK, isKeepCallBack);
                }

            } catch (JSONException e1) {
                sendExceptionCallback(e1.toString(), true);
            }
        }
    }

    private class BuildCardInfoParams {
        public int slotNum;
    }

    private class BuildCardInfoTask extends AsyncTask<BuildCardInfoParams, Void, Void> {

        @Override
        protected Void doInBackground(BuildCardInfoParams... params) {

            try {
                byte[] atr = mReader.power(params[0].slotNum, Reader.CARD_WARM_RESET);
                mReader.setProtocol(params[0].slotNum, Reader.PROTOCOL_T0 | Reader.PROTOCOL_T1);

                byte[] sendBuffer = { (byte) 0xFF, (byte) 0xCA, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
                byte[] recvBuffer = new byte[12];
                mReader.transmit(params[0].slotNum, sendBuffer, sendBuffer.length, recvBuffer, recvBuffer.length);

                byte[] trimmed = trimByteArray(recvBuffer);

                buildAndSentCardInfo(trimmed, identifyTagType(atr));

            } catch (ReaderException e) {
                Log.d(":: KRISH ::", e.toString());
            }

            return null;
        }
    }

    public static String identifyTagType(byte[] bytes) {
        String tagType = UNKNOWN;
        if (bytes.length >= 11) {
            switch (((bytes[13] & 255) << 8) | (bytes[14] & 255)) {
            case 1:
                return MIFARE_CLASSIC_1K;
            case 2:
                return MIFARE_CLASSIC_4K;
            case 3:
                return MIFARE_ULTRALIGHT;
            case 38:
                return MIFARE_MINI;
            case 61444:
                return TOPAZ_JEWEL;
            case 61457:
                return FELICA_212K;
            case 61458:
                return FELICA_424K;
            case 65344:
                return NFCIP;
            default:
                return tagType;
            }
        } else if (Arrays.equals(bytes,
                new byte[] { (byte) 59, (byte) -127, Byte.MIN_VALUE, (byte) 1, Byte.MIN_VALUE, Byte.MIN_VALUE })) {
            return DESFIRE_EV1;
        } else {
            return tagType;
        }
    }

    static byte[] trimByteArray(byte[] bytes) {
        int i = bytes.length - 1;
        while (i >= 0 && bytes[i] == 0) {
            --i;
        }

        return Arrays.copyOf(bytes, i + 1);
    }

    void sendCallback(JSONObject obj, PluginResult.Status status, Boolean isKeepCallBack) {
        PluginResult result = new PluginResult(status, obj);
        result.setKeepCallback(isKeepCallBack);
        rootCallbackContext.sendPluginResult(result);
    }

    void sendExceptionCallback(String errorMsg, Boolean isKeepCallBack) {
        PluginResult result = new PluginResult(PluginResult.Status.ERROR, errorMsg);
        result.setKeepCallback(isKeepCallBack);
        rootCallbackContext.sendPluginResult(result);
    }

    /**
     * Logs the contents of buffer.
     * 
     * @param buffer       the buffer.
     * @param bufferLength the buffer length.
     */
    private void logBuffer(byte[] buffer, int bufferLength) {

        String bufferString = "";

        for (int i = 0; i < bufferLength; i++) {

            String hexChar = Integer.toHexString(buffer[i] & 0xFF);
            if (hexChar.length() == 1) {
                hexChar = "0" + hexChar;
            }

            if (i % 16 == 0) {

                if (bufferString != "") {

                    bufferString = "";
                }
            }

            bufferString += hexChar.toUpperCase() + " ";
        }

        if (bufferString != "") {

        }
    }

    /**
     * Converts the HEX string to byte array.
     * 
     * @param hexString the HEX string.
     * @return the byte array.
     */
    private byte[] toByteArray(String hexString) {

        int hexStringLength = hexString.length();
        byte[] byteArray = null;
        int count = 0;
        char c;
        int i;

        // Count number of hex characters
        for (i = 0; i < hexStringLength; i++) {

            c = hexString.charAt(i);
            if (c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f') {
                count++;
            }
        }

        byteArray = new byte[(count + 1) / 2];
        boolean first = true;
        int len = 0;
        int value;
        for (i = 0; i < hexStringLength; i++) {

            c = hexString.charAt(i);
            if (c >= '0' && c <= '9') {
                value = c - '0';
            } else if (c >= 'A' && c <= 'F') {
                value = c - 'A' + 10;
            } else if (c >= 'a' && c <= 'f') {
                value = c - 'a' + 10;
            } else {
                value = -1;
            }

            if (value >= 0) {

                if (first) {

                    byteArray[len] = (byte) (value << 4);

                } else {

                    byteArray[len] |= value;
                    len++;
                }

                first = !first;
            }
        }

        return byteArray;
    }

    /**
     * Converts the integer to HEX string.
     * 
     * @param i the integer.
     * @return the HEX string.
     */
    private String toHexString(int i) {

        String hexString = Integer.toHexString(i);
        if (hexString.length() % 2 != 0) {
            hexString = "0" + hexString;
        }

        return hexString.toUpperCase();
    }

    /**
     * Converts the byte array to HEX string.
     * 
     * @param buffer the buffer.
     * @return the HEX string.
     */
    private String toHexString(byte[] buffer) {

        String bufferString = "";

        for (int i = 0; i < buffer.length; i++) {

            String hexChar = Integer.toHexString(buffer[i] & 0xFF);
            if (hexChar.length() == 1) {
                hexChar = "0" + hexChar;
            }

            bufferString += hexChar.toUpperCase() + " ";
        }

        return bufferString;
    }

}
